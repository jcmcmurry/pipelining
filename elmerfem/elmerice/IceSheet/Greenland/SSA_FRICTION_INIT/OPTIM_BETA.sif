!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! .sif file for the inverse method
!   Optimize the friction coefficient to reduce mismatch with obs. surface velocities
!   with contrains on the flux divergence and assume smoothness of the friction field
!  
! Author: F. Gillet-Chaulet (IGE-Grenoble-FR)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! FOR DEFAULT USE/UPDATE PARAMETERS IN OPTIM_BETA.IN
include OPTIM_BETA.IN
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!#######################################################
!#######################################################
Header
  Mesh DB "." "$MESH$"
End
!#######################################################
!#######################################################
Constants
  sea level = Real $zsl
  water density = Real $rhow
End
!#######################################################
!#######################################################
Simulation
  Coordinate System  = Cartesian 2D
  Simulation Type = Steady State

  Steady State Min Iterations = 1
  Steady State Max Iterations = $niter

  Post File = "RUN_$name$_.vtu"
  OutPut File = "RUN_$name$_.result"
  Output Intervals = $OutPutIntervals

  Restart File = "RUN0_.result"
  Restart Position = 0
  Restart Time = 0.0
  Restart Before Initial Conditions = Logical true

  max output level = 3
End
!#######################################################
!#######################################################
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End
!#######################################################
!#######################################################
Initial Condition  1
 ! Initial guess of log10(slip coef.)
  alpha = Variable slc0
   REAL procedure "ElmerIceUSF" "Log10A"
End
!#######################################################
!#######################################################
Body Force 1
  Flow BodyForce 1 = Real 0.0            
  Flow BodyForce 2 = Real 0.0              
  Flow BodyForce 3 = Real $gravity

! change of variable; DJDBeta is the derivative of the Cost fn w.r.t. the slip coeff.
  DJDalpha = Variable DJDBeta , alpha
     REAL procedure "ElmerIceUSF" "Derivative_TenPowerA"

!# For Jdiv
  Top Surface Accumulation = Equals smb
  Bottom Surface Accumulation = Real 0.0
  Observed dhdt = Equals dhdt_obs

!# Cost not computed if H<=Hmin
  CostV Passive = Variable H
         Real procedure "USFs" "PassiveCond_H"
  CostDiv Passive = Variable H
         Real procedure "USFs" "PassiveCond_H"
  Passive Element Min Nodes = Integer 3

!# at the end take slip coef.=10^alpha (for post-processing or restart)
  slc = Variable alpha
      REAL procedure "ElmerIceUSF" "TenPowerA"
End
!#######################################################
!#######################################################
Material 1
! Material properties
  Viscosity Exponent = Real $1/n
  Critical Shear Rate = Real 1.0e-16

  SSA Mean Viscosity = Equals Mu
  SSA Mean Density = Real $rhoi

  SSA Friction Law = String "linear"
  ! The friction parameter is 10^the optimised variable to insure > 0
  SSA Friction Parameter = Variable alpha
      REAL procedure "ElmerIceUSF" "TenPowerA"
End
!#######################################################
!#######################################################
Solver 1
  Equation = "SSA"
  Variable = -dofs 2 "SSAVelocity"

  Procedure = "ElmerIceSolvers" "AdjointSSA_SSASolver"

!! Mandatory for the adjoint 
  Calculate Loads = Logical True

!! NUMERICAL INFORMATION
  !Linear System Solver = Direct
  !Linear System Direct Method = mumps
   Linear System Solver = Iterative
   Linear System Max Iterations = 300
   Linear System Iterative Method = BiCGStab
   Linear System Preconditioning = ILU2
   Linear System Abort Not Converged = False
   Linear System Residual Output = 1000
   Linear System Convergence Tolerance = 1.0e-12

   Nonlinear System Max Iterations = 30
   Nonlinear System Convergence Tolerance  = 1.0e-10
   Nonlinear System Newton After Iterations = 20
   Nonlinear System Newton After Tolerance = 1.0e-05
   Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = Real 1.0e-12

!!!!!
  Sub-Element GL parameterization = logical True
  GL integration points number = Integer 20
!!!!!
!! Variables required for the inverse method
  Exported Variable 1 = -nooutput CostValue
  Exported Variable 2 = -nooutput DJDBeta
  Exported Variable 3 = -nooutput "Velocityb"
  Exported Variable 3 DOFs = 2
  Exported Variable 4 = -nooutput "ssavelocity loads"
  Exported Variable 4 DOFs = 2
End
!#######################################################
!!! Compute Cost function
!! Here the cost is the discrete sum_1^Ndata 1/2 ||u-u^obs|| evaluated at the data location (which may not correspond to mesh nodes)
Solver 2
  Equation = "Cost"
  !!  Solver need to be associated => Define dumy variable
    Variable = -nooutput "CostV"
    Variable DOFs = 1

    procedure = "ElmerIceSolvers" "AdjointSSA_CostDiscSolver"

   Optimize Bandwidth = logical false

   Problem Dimension = Integer 2 !2D mesh and 2D SSA Solution
   Cost Variable Name = String "CostValue"  ! Name of Cost Variable
 ! save the cost as a function of iterations (iterations,Cost,rms=sqrt(2*Cost/Ndata)
   Cost Filename = File "Cost_U_$name$.dat"
   Lambda=Real 1.0

   Observed Variable Name = String "SSAVelocity"
 ! File with data: 
 !   ASCII x,y,u,v
 ! or netcdf with vx, vy
   Observation File Name = File "$VELOCITY_DATA$"
 ! 
   Save used data = logical False
end
!#######################################################
!!! Compute Cost function Jdiv (mismatch between model and observed flux divergence)
!!  Jdiv=int_ 0.5 * (dhdt_obs + div(uH)-MB)^2
Solver 3
  Equation = "Cost_DHDT"
  !!  Solver need to be associated => Define dumy variable
    Variable = -nooutput "CostDiv"
    Variable DOFs = 1

   procedure = "ElmerIceSolvers" "AdjointSSA_CostFluxDivSolver"

   Optimize Bandwidth = logical false

   Reset Cost Value = Logical False

   Problem Dimension = Integer 2 !2D mesh and 2D SSA Solution
   Cost Variable Name = String "CostValue"  ! Name of Cost Variable

   Lambda= Real $LambdaDiv

   Compute DJDZb = Logical False
   Compute DJDZs = Logical False

 ! save the cost as a function of iterations (iterations,Cost,rms=sqrt(2*Cost/area))
   Cost Filename = File "Cost_dHdt_$name$.dat"
end
!#######################################################
!!!!  Adjoint Solution
Solver 4
  Equation = "Adjoint"
  Variable = -nooutput Adjoint
  Variable Dofs = 2

  procedure = "ElmerIceSolvers" "AdjointSSA_AdjointSolver"

!Name of the flow solution solver
  Flow Solution Equation Name = string "SSA"

!! Numerical Stuff
  !Linear System Solver = Direct
  !Linear System Direct Method = mumps
   Linear System Solver = Iterative
   Linear System Max Iterations = 300
   Linear System Iterative Method = BiCGStab
   Linear System Preconditioning = ILU2
   Linear System Abort Not Converged = False
   Linear System Residual Output = 1000
   Linear System Convergence Tolerance = 1.0e-12
End
!#######################################################
!!!!!  Compute Derivative of Cost function / Beta
Solver 5
  Equation = "DJDBeta"

  !!  Solver need to be associated => Define dumy variable
    Variable = -nooutput "DJDB"
    Variable DOFs = 1

    procedure = "ElmerIceSolvers" "AdjointSSA_GradientSolver"

    Optimize Bandwidth = logical false

    Flow Solution Name = String "SSAVelocity"
    Adjoint Solution Name = String "Adjoint"

    Compute DJDBeta = Logical True   ! Derivative with respect to the Friction parameter
    Reset DJDBeta = Logical True

end
!#######################################################
Solver 6
  Equation = "UpdateExport"
   Variable = -nooutput "dumy"
    Procedure = File "ElmerIceSolvers" "UpdateExport"
    Optimize Bandwidth = logical false

!used here to update DJDalpha from DJDbeta (see correponding line in Body Force section)
  Exported Variable 1 =  alpha
  Exported Variable 2 =  -nooutput DJDalpha
End
!#######################################################
!!!!!  Compute Regularistaion term
!   Regularisation by default is: Lambda * int_{Pb dimension} 0.5 * (d(var)/dx)**2 
!     OUTPUT are : J and DJDvar
Solver 7
  Equation = "DJDBeta_Reg"

  !!  Solver need to be associated => Define dumy variable
    Variable = -nooutput "DJDBReg"
    Variable DOFs = 1

    procedure = "ElmerIceSolvers" "AdjointSSA_CostRegSolver"
    Optimize Bandwidth = logical false

    Problem Dimension=Integer 2
    Cost Filename=File "CostReg_$name$.dat"
    Optimized Variable Name= String "alpha"
    Gradient Variable Name= String "DJDalpha"
    Cost Variable Name= String "CostValue"
    Lambda= Real $LambdaReg
    Reset Cost Value= Logical False  !=> DJDapha already initialized in solver DJDBeta; switch off initialisation to 0 at the beginning of this solver
    A priori Regularisation= Logical False
end
!#######################################################
!!!!! Optimization procedure : Parallel only
Solver 8
  Equation = "Optimize_m1qn3"
  !!  Solver need to be associated => Define dumy variable
    Variable =  -nooutput "UB"
    Variable DOFs = 1

  procedure = "ElmerIceSolvers" "Optimize_m1qn3Parallel"

  Cost Variable Name = String "CostValue"
  Optimized Variable Name = String "alpha"
  Gradient Variable Name = String "DJDalpha"
  gradient Norm File = String "GradientNormAdjoint_$name$.dat"

 ! M1QN3 Parameters
  M1QN3 dxmin = Real 1.0e-10
  M1QN3 epsg = Real  1.e-8
  M1QN3 niter = Integer $niter
  M1QN3 nsim = Integer $niter
  M1QN3 impres = Integer 5
  M1QN3 DIS Mode = Logical False
  M1QN3 df1 = Real 0.1
  M1QN3 normtype = String "dfn"
  M1QN3 OutputFile = File  "M1QN3_$name$.dat"
  M1QN3 ndz = Integer 20

end
!#######################################################
Solver 9
  Equation = "UpdateExport2"
   Variable = -nooutput "dumy2"
    Procedure = File "ElmerIceSolvers" "UpdateExport"
    Optimize Bandwidth = logical false
! recompute the slip coef. = 10^alpha (for post-processing or restart)
  Exported Variable 1 =  slc
End
!#######################################################
!#######################################################
Equation 1
  Active Solvers(9) = 1 2 3 4 5 6 7 8 9
End
!#######################################################
!#######################################################
Boundary Condition 1
  Target Boundaries = 1 
  calving front = logical TRUE
End
